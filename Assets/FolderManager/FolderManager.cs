using System;
using System.Linq;
using System.Runtime.InteropServices;
using JetBrains.Annotations;
using SD.FolderManagement.Utility;
using UnityEditor;
using UnityEngine;

namespace SD.FolderManagement {

    public static class FolderManager {

        //Defaults
        private const string PLUGIN_NAME = "FolderManager";
        private const string GENERATED_FOLDER_NAME = "AutoGenerated";
        private const string DATA_FOLDER_NAME = "Data";
        private const string RESOURCES_FOLDER_NAME = "Resources";
        private const string SAVES_FOLDER_NAME = "Saves";




        public static Action ClientRepaints;
        public static void RepaintClients() { if (ClientRepaints != null) ClientRepaints(); }

        private static bool _initiated;

        #region Creating the workspace

        public static void Initialize() {
            if (!_initiated)
                SetupFramework();
        }

        public static void ReInit() {
            _initiated = false;

            SetupFramework();
        }

        public static bool Create() {

            if (Exists()) return false;

            if (DirectoryUtility.Create(GeneratedFolderPath())) {
                if (!DirectoryUtility.Create(DataFolderPath())) {
                    return false;
                }
                if (!DirectoryUtility.Create(ResourcesFolderPath())) {
                    return false;
                }
                if (!DirectoryUtility.Create(SavesFolderPath())) {
                    return false;
                }
            }

            AssetDatabase.Refresh();
            return true;
        }

        private static void SetupFramework() {
            FMInputManager.SetupInput();

            _initiated = true;
        }

        #region Lookups

        public static bool Exists() {
            return DirectoryUtility.ExistsRelative("/" + PLUGIN_NAME + "/" + GENERATED_FOLDER_NAME);
        }

        public static string PluginFolderPath() {
            return DirectoryUtility.GetAppDataPath() + "/" + PLUGIN_NAME;
        }

        public static string GeneratedFolderPath() {
            return PluginFolderPath() + "/" + GENERATED_FOLDER_NAME;
        }

        public static string DataFolderPath() {
            return GeneratedFolderPath() + "/" + DATA_FOLDER_NAME;
        }

        public static string ResourcesFolderPath() {
            return GeneratedFolderPath() + "/" + RESOURCES_FOLDER_NAME;
        }

        public static string SavesFolderPath() {
            return ResourcesFolderPath() + "/" + SAVES_FOLDER_NAME;
        }


        #endregion

        #endregion


        public static void Generate(FolderTree folderTree) {
            //Create the root directory;
            string path = DirectoryUtility.GetAppDataPath() + "/" + folderTree.TreeElements[1].Name;
            //DirectoryUtility.CheckAndCreate(path);
            string currentPath = path;
            int depth = 0;

            for (int i = 0; i < folderTree.TreeElements.Count; i++)
            {
                
            }
              
        }
    }
}

